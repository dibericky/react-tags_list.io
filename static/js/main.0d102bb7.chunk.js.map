{"version":3,"sources":["TagsViewer.js","Tags.js","index.js"],"names":["AddTagButton","_ref","onClick","onChange","isError","_useState","useState","_useState2","Object","slicedToArray","showButton","setShowButton","react_default","a","createElement","es_tag","style","background","borderStyle","icon","type","input","size","onPressEnter","e","target","value","objectSpread","width","border","boxShadow","suffix","TagsViewer","_ref2","tags","onAdd","onDelete","_useState3","_useState4","setIsError","tagsList","map","tag","index","TagWrapper","key","concat","label","color","closable","onClose","margin","name","react","Container","val","es_alert","message","showIcon","styled","div","_templateObject","_templateObject2","Tags","setTags","some","cloneTags","slice","push","filteredTags","filter","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","console","log","className","Wrapper","Component","src_templateObject","rootElement","document","getElementById","ReactDOM","render","src_App"],"mappings":"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","file":"static/js/main.0d102bb7.chunk.js","sourcesContent":["import React, { useState, Fragment } from \"react\";\r\nimport { Tag, Input, Icon, Alert } from \"antd\";\r\nimport styled from \"styled-components\";\r\n\r\nfunction AddTagButton({ onClick, onChange, isError }) {\r\n  const [showButton, setShowButton] = useState(true);\r\n\r\n  const onInputSubmit = e => {\r\n    if (onClick(e.target.value)) {\r\n      setShowButton(true);\r\n    }\r\n  };\r\n  const onErrorInputStyle = {\r\n    border: \"1px solid red\",\r\n    boxShadow: \"0 0 0 2px #ffc4c7\"\r\n  };\r\n  return showButton ? (\r\n    <Tag\r\n      onClick={() => setShowButton(false)}\r\n      style={{ background: \"#fff\", borderStyle: \"dashed\" }}\r\n    >\r\n      <Icon type=\"plus\" /> New Tag\r\n    </Tag>\r\n  ) : (\r\n    <Input\r\n      type=\"text\"\r\n      size=\"small\"\r\n      onPressEnter={onInputSubmit}\r\n      onChange={onChange}\r\n      style={{ width: 78, ...(isError ? onErrorInputStyle : {}) }}\r\n      suffix={<Icon type={'close-circle-o'} onClick={() => setShowButton(true)}/>}\r\n    />\r\n  );\r\n}\r\n\r\nexport default function TagsViewer({ tags, onAdd, onDelete }) {\r\n  const [isError, setIsError] = useState(false);\r\n  const onAddTag = val => {\r\n    if (onAdd(val)) {\r\n      setIsError(false);\r\n      return true;\r\n    }\r\n    setIsError(true);\r\n  };\r\n\r\n  const tagsList = tags.map((tag, index) => {\r\n    return (\r\n      <TagWrapper key={`${index}-${tag.label}`}>\r\n        <Tag\r\n          color={tag.color}\r\n          closable={tag.closable}\r\n          onClose={tag.closable ? onDelete : null}\r\n          style={{ margin: 0 }}\r\n        >\r\n          {tag.name}\r\n        </Tag>\r\n      </TagWrapper>\r\n    );\r\n  });\r\n  return (\r\n    <Fragment>\r\n      <Container>\r\n        {tagsList}\r\n        <TagWrapper>\r\n          <AddTagButton\r\n            onClick={onAddTag}\r\n            isError={isError}\r\n            onChange={() => setIsError(false)}\r\n          />\r\n        </TagWrapper>\r\n      </Container>\r\n      {isError ? (\r\n        <div>\r\n          <Alert message=\"Tag already exists\" type=\"error\" showIcon />\r\n        </div>\r\n      ) : null}\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nconst TagWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding: 2px 5px;\r\n`;\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  max-width: 100%;\r\n`;\r\n","import React, { useState } from \"react\";\r\n\r\nimport TagsViewer from \"./TagsViewer\";\r\n\r\nexport default function Tags() {\r\n  const [tags, setTags] = useState([\r\n    { name: \"foo\", closable: true, color: \"magenta\" },\r\n    { name: \"bar\", color: \"cyan\" },\r\n    { name: \"lorem\", closable: true, color: \"blue\" }\r\n  ]);\r\n\r\n  const onAdd = value => {\r\n    const isAlreadyExisting = tags.some(tag => tag.name === value);\r\n    if (isAlreadyExisting) {\r\n      return false;\r\n    }\r\n    const cloneTags = tags.slice(0);\r\n    cloneTags.push({ name: value, closable: true, color: \"green\" });\r\n    setTags(cloneTags);\r\n    return true;\r\n  };\r\n  \r\n  const onDelete = value => {\r\n    const filteredTags = tags.filter(tag => tag.name !== value);\r\n    setTags(filteredTags);\r\n  };\r\n\r\n  return <TagsViewer tags={tags} onAdd={onAdd} onDelete={onDelete} />;\r\n}\r\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport styled from \"styled-components\";\n\nimport Tags from \"./Tags\";\n\nimport \"antd/dist/antd.css\";\nimport \"./styles.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n      error: null\n    };\n  }\n  static getDerivedStateFromError(error) {\n    console.log(error);\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error, info) {\n    // You can also log the error to an error reporting service\n    console.log(error, info);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <span>\n          {\"Error: \"}\n          {this.state.error}\n        </span>\n      );\n    }\n\n    return (\n      <div className=\"App\">\n        <Wrapper>\n          <Tags />\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nconst Wrapper = styled.div`\n  width: 300px;\n  border: 1px solid blue;\n  overflow: hidden;\n`;\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}